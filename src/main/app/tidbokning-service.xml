<?xml version="1.0" encoding="utf-8"?>

<mule 
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:jdbc="http://www.mulesoft.org/schema/mule/jdbc"
	xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:https="http://www.mulesoft.org/schema/mule/https"
	xmlns:mule-xml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:smooks="http://www.muleforge.org/smooks/schema/mule-module-smooks"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:rest="http://www.mulesoft.org/schema/mule/rest"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.mulesoft.org/schema/mule/core      http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/ee/core   http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd 
		http://www.mulesoft.org/schema/mule/vm        http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
		http://www.mulesoft.org/schema/mule/jdbc      http://www.mulesoft.org/schema/mule/jdbc/current/mule-jdbc.xsd
		http://www.mulesoft.org/schema/mule/cxf       http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
		http://www.mulesoft.org/schema/mule/jms       http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
		http://www.mulesoft.org/schema/mule/http      http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
		http://www.mulesoft.org/schema/mule/https     http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
		http://www.mulesoft.org/schema/mule/xml       http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
		http://www.muleforge.org/smooks/schema/mule-module-smooks http://dist.muleforge.org/smooks/schema/mule-module-smooks/1.3/mule-module-smooks.xsd
		http://www.mulesoft.org/schema/mule/json      http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
		http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
		http://www.mulesoft.org/schema/mule/rest      http://www.mulesoft.org/schema/mule/rest/current/mule-rest.xsd
		http://www.mulesoft.org/schema/mule/xml       http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
	">

	<queued-asynchronous-processing-strategy name="tidbokning-workers-processing-strategy" maxThreads="50"/>    

    <ee:object-store-caching-strategy name="caching_strategy" keyGenerationExpression="#[payload]" doc:name="Caching Strategy">
        <custom-object-store class="se.skl.tp.aggregatingservices.crm.scheduling.getaggregatedsubjectofcareschedule.tidbokning.util.CacheMemoryStoreImpl">
        	<spring:property name="maxEntries" value="${CACHE_MAX_ENTRIES}"/>
        	<spring:property name="entryTTL" value="${CACHE_TTL_MS}"/>
        	<spring:property name="expirationInterval" value="${CACHE_EXPIRATION_INTERVAL_MS}"/>
        </custom-object-store>
    </ee:object-store-caching-strategy>
    
	<flow name="cache-flow">

		<https:inbound-endpoint
			doc:name="Inbound"
            connector-ref="soitoolkit-https-connector"
			address="${TIDBOKNING_INBOUND_URL}"
			exchange-pattern="request-response"
			transformer-refs="objToStr logReqIn"
			responseTransformer-refs="createSoapFaultIfException logRespOut">
		</https:inbound-endpoint>

		<cxf:proxy-service 
			service="GetAggregatedSubjectOfCareScheduleResponderService"
			wsdlLocation="classpath:/interactions/GetSubjectOfCareScheduleInteraction/GetAggregatedSubjectOfCareScheduleInteraction_1.1_RIVTABP21.wsdl"
			namespace="urn:riv:crm:scheduling:GetAggregatedSubjectOfCareSchedule:1:rivtabp21"
			payload="envelope">
		</cxf:proxy-service>
		
	    <custom-transformer doc:name="Extract SubjectOfCare Id" class="se.skl.tp.aggregatingservices.crm.scheduling.getaggregatedsubjectofcareschedule.tidbokning.GetSubjectOfCareIdTransformer"/>

        <ee:cache doc:name="Cache" cachingStrategy-ref="caching_strategy">
			<flow-ref name="main-flow" doc:name="main-flow"/>
		</ee:cache>

	</flow>
	
	<flow name="main-flow" processingStrategy="synchronous">

        <response>
            <custom-transformer doc:name="Response List Transformer" class="se.skl.tp.aggregatingservices.crm.scheduling.getaggregatedsubjectofcareschedule.tidbokning.TidbokningResponseListTransformer"/>
        </response>

	    <custom-transformer doc:name="Find Content Transformer" class="se.skl.tp.aggregatingservices.crm.scheduling.getaggregatedsubjectofcareschedule.engagemangsindex.FindContentRequestTransformer"/>

        <enricher target="#[payload]">
			<https:outbound-endpoint 
				doc:name="Engagement Index"
	            connector-ref="soitoolkit-https-connector"
				address="${ENGAGEMANGSINDEX_OUTBOUND_URL}" 
				exchange-pattern="request-response"
				responseTimeout="${SERVICE_TIMEOUT_MS}"
				transformer-refs="logReqOut"
				responseTransformer-refs="logRespIn">
		        <cxf:jaxws-client 
		        	port="FindContentResponderPort" 
		        	operation="FindContent" 
		        	clientClass="se.riv.itintegration.engagementindex.findcontent.v1.rivtabp21.FindContentResponderService"
		        	wsdlLocation="classpath:/interactions/FindContentInteraction/FindContentInteraction_1.0_RIVTABP21.wsdl"
		       	/>
			</https:outbound-endpoint>
        </enricher>

	    <custom-transformer doc:name="Request List Transformer" class="se.skl.tp.aggregatingservices.crm.scheduling.getaggregatedsubjectofcareschedule.tidbokning.TidbokningRequestListTransformer"/>

		<flow-ref name="request-reply-flow" doc:name="request-reply-flow"/>

	</flow>
	
	<flow name="request-reply-flow" processingStrategy="synchronous">

        <request-reply  doc:name="Request/Reply" timeout="${AGGREGATED_SERVICE_TIMEOUT_MS}">  
            <vm:outbound-endpoint path="splitter"> 
	            <message-properties-transformer scope="outbound"> 
	                <delete-message-property key="MULE_REPLYTO"/> 
	            </message-properties-transformer> 
            </vm:outbound-endpoint>
            <vm:inbound-endpoint path="reply"></vm:inbound-endpoint> 
        </request-reply>

	</flow>
	
	
    <flow name="splitter-flow" doc:name="splitter-flow">
        <vm:inbound-endpoint exchange-pattern="one-way" path="splitter" doc:name="vm://splitter"/>
		
		<collection-splitter enableCorrelation="IF_NOT_SET"/>
		
        <message-properties-transformer scope="outbound" doc:name="Set ReplyTo = vm://agregate"> 
            <add-message-property key="MULE_REPLYTO" value="vm://aggregate"/> 
        </message-properties-transformer> 
        
        <vm:outbound-endpoint path="worker" doc:name="vm://worker"/>
    </flow>
    
	<custom-transformer name="Fix1" class="se.skl.tp.aggregatingservices.crm.scheduling.getaggregatedsubjectofcareschedule.tidbokning.Fix1Transformer"/>

    
    <flow name="worker-flow" processingStrategy="tidbokning-workers-processing-strategy" doc:name="worker-flow">
        <vm:inbound-endpoint exchange-pattern="one-way" path="worker" doc:name="vm://worker"/>

		<!-- Save the incoming logical-address in a variable so that is can be added to the response in the <response> - element -->
        <set-variable variableName="logical-address" value="#[groovy:payload[0]]" doc:name="Set Logical Address"/>

		<https:outbound-endpoint 
			doc:name="Outbound"
            connector-ref="soitoolkit-https-connector"
			address="${TIDBOKNING_OUTBOUND_URL}" 
			exchange-pattern="request-response"
			responseTimeout="${SERVICE_TIMEOUT_MS}"
			transformer-refs="logReqOut"
			responseTransformer-refs="logRespIn Fix1">
	        <cxf:jaxws-client 
	        	port="GetSubjectOfCareScheduleResponderPort" 
	        	operation="GetSubjectOfCareSchedule" 
	        	clientClass="se.riv.crm.scheduling.getsubjectofcareschedule.v1.rivtabp21.GetSubjectOfCareScheduleResponderService"
	        	wsdlLocation="classpath:/interactions/GetSubjectOfCareScheduleInteraction/GetSubjectOfCareScheduleInteraction_1.1_RIVTABP21.wsdl"
	        />
		</https:outbound-endpoint>
 
        <catch-exception-strategy doc:name="Catch Exception Strategy">
<!-- 
        	SKALL RETURNERA ETT FÃ„RDIGT ERROR-REPORT OBJECT
 -->
            <custom-transformer doc:name="Error Handler" class="se.skl.tp.aggregatingservices.crm.scheduling.getaggregatedsubjectofcareschedule.tidbokning.TidbokningHandleErrorTransformer"/>
	        <vm:outbound-endpoint path="aggregate" doc:name="vm://aggregate"/>
        </catch-exception-strategy>
    </flow>


    <flow name="aggregation-flow" doc:name="aggregation-flow">
        <vm:inbound-endpoint exchange-pattern="one-way" path="aggregate" doc:name="vm://aggregate"/>
<!-- 
        <scripting:component doc:name="Groovy">
            <scripting:script engine="Groovy">
                <scripting:text><![CDATA[
println new Date().format('yyyy-MM-dd HH:mm:ss.SSS') + ", agg-in-correlationId: $message.correlationId"
println "agg-in-correlationGroupSize: $message.correlationGroupSize"
println "agg-in-payload: " + payload.class.name
System.err.println("agg-in-p: " + message.getInboundProperty('logical-address'))

return message]]></scripting:text>
            </scripting:script>
        </scripting:component>
 -->

        <collection-aggregator timeout="${AGGREGATE_TIMEOUT_MS}" failOnTimeout="false" doc:name="Collection Aggregator"/>

<!-- 
        <scripting:component doc:name="Groovy">
            <scripting:script engine="Groovy">
                <scripting:text><![CDATA[println new Date().format('yyyy-MM-dd HH:mm:ss.SSS') + ", agg-out-correlationId: $message.correlationId"
println "agg-out-correlationGroupSize: $message.correlationGroupSize"

String p = "### RESULT: " + payload.toString()
println new Date().toString() + ": aggregation result: $p"
return message]]></scripting:text>
            </scripting:script>
        </scripting:component>
 -->

        <vm:outbound-endpoint path="reply" doc:name="vm://reply"/>
    </flow>
	
</mule>